name: android-build
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Flutter 3.24.0 (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.24.0"

      - name: Env check
        run: |
          flutter --version
          flutter doctor -v

      - name: Clean & deps
        run: |
          rm -rf build android/app/build
          flutter clean
          flutter pub get

      # ---------- Firma release (si hay secretos) ----------
      - name: Prepare release keystore (optional)
        if: ${{ vars.ANDROID_KEYSTORE_BASE64 != '' || secrets.ANDROID_KEYSTORE_BASE64 != '' }}
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 || vars.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS || vars.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD || vars.ANDROID_KEY_PASSWORD }}
          ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD || vars.ANDROID_STORE_PASSWORD }}
        run: |
          set -e
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > android/upload-keystore.jks
          cat > android/key.properties << 'EOF'
          storePassword=${ANDROID_STORE_PASSWORD}
          keyPassword=${ANDROID_KEY_PASSWORD}
          keyAlias=${ANDROID_KEY_ALIAS}
          storeFile=upload-keystore.jks
          EOF
          echo "key.properties created"

      # Inyecta config de firma si existe key.properties
      - name: Inject signing into app/build.gradle (optional)
        run: |
          set -e
          if [ -f android/key.properties ]; then
            APP=android/app/build.gradle
            # agrega signingConfigs.release si no existe
            if ! grep -q "signingConfigs" "$APP"; then
              awk '1;/android *\{/{print;print "    signingConfigs {";print "        release {";print "            def keystoreProperties = new Properties()";print "            def keystoreFile = rootProject.file(\"key.properties\")";print "            if (keystoreFile.exists()) keystoreProperties.load(new FileInputStream(keystoreFile))";print "            storeFile = keystoreProperties.get(\"storeFile\") ? rootProject.file(keystoreProperties.get(\"storeFile\")) : null";print "            storePassword = keystoreProperties.get(\"storePassword\")";print "            keyAlias = keystoreProperties.get(\"keyAlias\")";print "            keyPassword = keystoreProperties.get(\"keyPassword\")";print "        }";print "    }"}' "$APP" > "$APP.tmp" && mv "$APP.tmp" "$APP"
            fi
            # vincula release con signingConfigs.release
            if ! grep -q "signingConfig signingConfigs.release" "$APP"; then
              awk '1;/buildTypes *\{/{flag=1} flag && /release *\{/{print;print "            signingConfig signingConfigs.release";flag=0;next} {print}' "$APP" > "$APP.tmp" && mv "$APP.tmp" "$APP"
            fi
            echo "signingConfig injected"
          else
            echo "No key.properties found; skipping release signing"
          fi

      # ---------- Build con Flutter ----------
      # APK universal release (evita "paquete no v√°lido" por ABI)
      - name: Build APK release (universal)
        run: |
          set -e
          flutter build apk --release --target-platform=android-arm,android-arm64,android-x64 || true

      # AAB release (para Play Store)
      - name: Build AAB release
        run: |
          set -e
          flutter build appbundle --release || true

      # APK debug siempre instalable (firma debug)
      - name: Build APK debug (installable)
        run: |
          set -e
          flutter build apk --debug --no-tree-shake-icons || true

      # ---------- Fallback con Gradle directo ----------
      - name: Build with Gradle (fallback)
        working-directory: android
        run: |
          set -e
          ./gradlew --version
          ./gradlew :app:assembleRelease || true
          ./gradlew :app:bundleRelease || true
          ./gradlew :app:assembleDebug  || true

      # ---------- Listar outputs y subir artefactos ----------
      - name: List outputs (debug)
        run: |
          echo "::group::Outputs under build/"
          find build -type f \( -name "*.apk" -o -name "*.aab" \) -print || true
          echo "::endgroup::"
          echo "::group::Outputs under android/app/build/"
          find android/app/build -type f \( -name "*.apk" -o -name "*.aab" \) -print || true
          echo "::endgroup::"

      - name: Upload APKs (catch-all)
        uses: actions/upload-artifact@v4
        with:
          name: apks
          if-no-files-found: warn
          path: |
            build/app/outputs/flutter-apk/*release*.apk
            build/app/outputs/flutter-apk/app-debug.apk
            build/**/outputs/**/*.apk
            build/**/*.apk
            android/app/build/outputs/**/*.apk

      - name: Upload AABs (catch-all)
        uses: actions/upload-artifact@v4
        with:
          name: aabs
          if-no-files-found: warn
          path: |
            build/app/outputs/bundle/release/*.aab
            build/**/outputs/**/*.aab
            build/**/*.aab
            android/app/build/outputs/**/*.aab